// https://pest.rs/book/grammars/syntax.html
// @ marks a rule as an atomic. Prevent implicit whitespace and interior rules are silent
// $ marks a rule as a compound atomic. Prevent implicit whitespace but inner tokens are produced as normal
// If a rule is marked as atomic, all of its interior rules will also be atomic
// ! when placed prior to brackets ( like !{ ASCII_ALPHANUMERIC+ } ) will mark a rule as
//    non-atomic, even if it was called from an atomic rule
// _ marks a rule as silent, it will match but not produce rule tokens

// Implicit whitespacing is not on by default, this enables it
Newline = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | Newline }
BlockComment = _{ "/*" ~ (BlockComment | !"*/" ~ ANY)* ~ "*/" }
COMMENT = _{ ("//" ~ (!Newline ~ ANY)*) | BlockComment }
EndOf = _{ ";" }

Main = { SOI ~ Function+ ~ EOI }

// Function
Decorators = !{ "[" ~ (StrPlus | DecoratorKeyValuePair) ~ ("," ~ (StrPlus | DecoratorKeyValuePair))* ~ ","? ~ "]" }
DecoratorKeyValuePair = ${ StrPlus ~ "=" ~ StrPlus }
Function = ${ (Decorators ~ Newline)? ~ "case " ~ StrPlus ~ "()" ~ Block }
Block = !{ WHITESPACE ~ "{" ~ (Statement | Function | Teardown)* ~ "}" ~ EndOf? }
Teardown = { "TEARDOWN" ~ "{" ~ Statement* ~ "}" }
Statement = { (AssignmentExpr | AssertCommand | PrintCommand | Expression ) ~ EndOf }

// ASSIGNMENT STATEMENT
AssignmentExpr = { "var" ~ VariableNameAssignment ~ "=" ~ Expression }

// ASSERT STATEMENT
AssertCommand = { "ASSERT" ~ Negation? ~ AssertSubCommand ~ Value ~ Value ~ (QuoteString | FormattedString)? }
Negation = { "NOT" }
AssertSubCommand = { "EQUALS" | "GTE" | "GT" | "LTE" | "LT" | "STATUS" | "LENGTH" | "CONTAINS" }

// PRINT STATEMENT
PrintCommand = { "PRINT" ~ Value }

// EXPRESSION STATEMENT
Expression = { HttpCommand | "LITERAL" ~ LiteralValue | "LIST" ~ ListExpression | "FORMAT_STR" ~ FormattedString }

// HTTP EXPRESSION
// e.g. PUT /foo?field=5 name="hello" timeout=>60
HttpCommand = { HTTPVerb ~ Path ~ QueryParams? ~ HttpAssignment* ~ HttpHeader* ~ KeyValuePair* }
HTTPVerb = { "GET" | "PUT" | "POST" | "DELETE" }
// e.g. /foo/bar?thing=5&other=50&another=10
Path = ${ PathEndpoint+ }
PathEndpoint = { "/" ~ VariableOrStr+ }
QueryParams = ${ "?" ~ HttpAssignment ~ AdditionalPathArgs* }
AdditionalPathArgs = ${ "&" ~ HttpAssignment }
KeyValuePair = ${ VariableNameAssignment ~ "=>" ~ Value } // repeatable optional key/val like timeout=>60
HttpAssignment = ${ VariableNameAssignment ~ "=" ~ Value }
HttpHeader = ${ VariableNameAssignment ~ ":" ~ Value }

// LIST EXPRESSION
ListExpression = { ListNew | ListCommandExpr }
ListNew = { "NEW" ~ "[" ~ CommaSeparatedValues* ~ Value? ~ "]" }
CommaSeparatedValues = { Value ~ "," }
ListCommandExpr = { ListCommand ~ VariableValue ~ Value? }
ListCommand = { "LENGTH" | "APPEND" | "REMOVE" | "POP" }

// LITERAL
// TODO: Add support for JSON here, see TODO.md
LiteralValue = { QuoteString | Number | Boolean | Null }
// Strings
// TODO: Will need to add variable support in here
QuoteString = { "\"" ~ QuoteStringInner ~ "\"" }
QuoteStringInner = { UserString }
UserString = @{ Char+ }
Char = {
   !("\"" | "\\" | "(" | ")") ~ ANY
   | WHITESPACE
   | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "(" | ")")
   | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
// Numbers
Number = { Float | SignedNumber | UnsignedNumber }
Float = @{ "-"? ~ UnsignedNumber ~ "." ~ ASCII_DIGIT+ }
SignedNumber = @{ "-" ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
UnsignedNumber = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
// Bool
Boolean = { "true" | "True" | "false" | "False" }
// Null
Null = { ^"null" }

// VARIABLES
VariableValue = ${ "(" ~ NestedVariable+ ~ ")" }
// TODO: This would allow for something like "foo....bar" which is not a defined variable. Need to
//       allow for only a single `.` between words
NestedVariable = { VariableLegalCharacters+ }
VariableLegalCharacters = _{ Str | "." }

// FORMATTED STRING
// Need a $ here
FormattedString = ${ "\"" ~ FormattedStringInner+ ~ "\"" }
FormattedStringInner = { UserString | VariableValue }

// GENERAL USE

// TODO: Value is a really bad name. Might want to change this to something like 'Term'
//       'Value' is meant to represent data that is either a LITERAL or something that must be resolved,
//       like a variable
Value = ${ LiteralValue | FormattedString | VariableValue }

VariableNameAssignment = { Str+ }

VariableOrStr = { VariableValue | StrPlus }
StrPlus = { Str+ }
Str = _{ ASCII_ALPHANUMERIC | "-" | "_" }

// Text with multiple variables?
// STRING = { "\"" ~ (TEXT ~ "(" ~ IDENT ~ ")")* ~ TEXT ~ "\"" }
